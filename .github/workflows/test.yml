# Run tests on Windows, Linux, and Mac
#
# NOTE: Pin actions to a specific commit to avoid having the authentication
# token stolen if the Action is compromised. See the comments and links here:
# https://github.com/pypa/gh-action-pypi-publish/issues/27
#
name: test

# Only build PRs, the master main, and releases. Pushes to branches will only
# be built when a PR is opened. This avoids duplicated buids in PRs comming
# from branches in the origin repository (1 for PR and 1 for push).
on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    # Run every Monday at 12:00 UTC
    # * is a special character in YAML so you have to quote this string
    - cron:  '00 12 * * 1'

# Use bash by default in all jobs
defaults:
  run:
    shell: bash

jobs:

  #############################################################################
  # Run tests
  test:
    name: ${{ matrix.os }} python=${{ matrix.python }} dependencies=${{ matrix.dependencies }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      # Otherwise, the workflow would stop if a single job fails. We want to
      # run all of them to catch failures in different combinations.
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
          - windows
        python:
          - "3.6"
          - "3.10"
        dependencies:
          - latest
          - oldest
    env:
      REQUIREMENTS: env/requirements-test.txt
      # Used to tag codecov submissions
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python }}
      DEPENDENCIES: ${{ matrix.dependencies }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch more than the last commit so that setuptools-scm can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version still be wrong.
          # Increase if necessary.
          fetch-depth: 100
          # The GitHub token is preserved by default but this job doesn't need
          # to be able to push to GitHub.
          persist-credentials: false

      # Need the tags so that setuptools-scm can form a valid version number
      - name: Fetch git tags
        run: git fetch origin 'refs/tags/*:refs/tags/*'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Collect requirements - run-time
        run: python tools/export_requirements.py > requirements-full.txt

      - name: Collect requirements - convert to oldest supported
        if: matrix.dependencies == 'oldest'
        run: python tools/oldest_requirements.py requirements-full.txt

      - name: Collect requirements - other
        run: |
          echo "Capturing dependencies from:"
          for requirement in $REQUIREMENTS
          do
            echo "  $requirement"
            cat $requirement >> requirements-full.txt
          done

      - name: List requirements
        run: |
          echo "Collected dependencies:"
          cat requirements-full.txt

      - name: Install requirements
        run: |
          # Install the build requirements before anything else so pip can use
          # wheels for other packages.
          python -m pip install --requirement env/requirements-build.txt
          python -m pip install --requirement requirements-full.txt

      - name: Build source and wheel distributions
        run: |
          make build
          echo ""
          echo "Generated files:"
          ls -lh dist/

      - name: Install the package and requirements
        run: python -m pip install `ls dist/*.whl`

      - name: List installed packages
        run: python -m pip freeze

      - name: Try to import Nene
        run: python -c "import nene"

      - name: Run the command line program (Bash)
        run: nene --help

      - name: Run the command line program (Windows CMD)
        if: matrix.os == 'windows'
        run: nene --help
        shell: cmd

      - name: Run the command line program (Powershell)
        if: matrix.os == 'windows'
        run: nene --help
        shell: pwsh

      - name: Build the documentation
        run: cd doc && nene

      - name: Build the documentation (Windows CMD)
        if: matrix.os == 'windows'
        run: |
          cd doc
          nene
        shell: cmd

      - name: Build the documentation (Powershell)
        if: matrix.os == 'windows'
        run: |
          cd doc
          nene
        shell: pwsh
